# -*- coding: utf-8 -*-
"""
Telegram Shop Bot ‚Äî premium edition (python-telegram-bot 21.x)

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ /start –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (HTML)
‚Ä¢ –ú–µ–Ω—é: –ö–∞—Ç–∞–ª–æ–≥ / –ö–æ—Ä–∑–∏–Ω–∞ / üìû –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å / üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º
‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –∞–≤—Ç–æ‚Äë–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ @username (–µ—Å–ª–∏ –µ—Å—Ç—å), —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã, –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ orders.json
‚Ä¢ ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª —Å –º–æ—Å—Ç–æ–º: –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ /reply <user_id> <—Ç–µ–∫—Å—Ç>
"""

from __future__ import annotations

import json
import os
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from threading import Lock
from typing import Dict, List, Tuple

from dotenv import load_dotenv
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–Ω—Ñ–∏–≥ (.env)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CARD_DETAILS = os.getenv("CARD_DETAILS", "–¢-–ë–∞–Ω–∫: 0000 0000 0000 0000 ‚Äî –ò–º—è –§–∞–º–∏–ª–∏—è")
PAY_INSTRUCTIONS = os.getenv("PAY_INSTRUCTIONS", "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏/—á–µ–∫–∞.")
ORDERS_FILE = Path(os.getenv("ORDERS_FILE", "orders.json"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –î–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dataclass(frozen=True)
class Product:
    id: str
    title: str
    price: int  # —Ä—É–±–ª–∏
    description: str

PRODUCTS: Dict[str, Product] = {
    "BASIC": Product(
        id="BASIC",
        title='üíé –ü–∞–∫–µ—Ç "–ë–ê–ó–û–í–´–ô –°–¢–ê–†–¢"',
        price=1500,
        description=(
            "üíô –ê—É–¥–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–∏–∑—É–∞–ª–∞\n"
            "üíô –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞\n"
            "üíô –ê–Ω–∞–ª–∏–∑ 3 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n"
            "üíô –ì–∞–π–¥ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"
        ),
    ),
    "STRATEGY": Product(
        id="STRATEGY",
        title='üíé –ü–∞–∫–µ—Ç "–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ô –†–´–í–û–ö"',
        price=3000,
        description=(
            "üíô –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö –ø–ª–æ—â–∞–¥–æ–∫\n"
            "üíô –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏\n"
            "üíô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞\n"
            "üíô –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏"
        ),
    ),
    "UPGRADE": Product(
        id="UPGRADE",
        title='üíé –ü–∞–∫–µ—Ç "–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ü–ì–†–ï–ô–î"',
        price=5000,
        description=(
            "üíô –†–µ–±—Ä–µ–Ω–¥–∏–Ω–≥ –≤–∏–∑—É–∞–ª–∞ (–æ–±–ª–æ–∂–∫–∏, —à–∞–±–ª–æ–Ω—ã)\n"
            "üíô –ï–¥–∏–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è 2 –ø–ª–∞—Ç—Ñ–æ—Ä–º\n"
            "üíô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Ads\n"
            "üíô –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ),
    ),
    "TG_DESIGN": Product(
        id="TG_DESIGN",
        title="üé® –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞",
        price=500,
        description=(
            "–ü—Ä–∏–¥–∞–π—Ç–µ –≤–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥\n\n"
            "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å\n"
            "‚Ä¢ –®–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è, —à–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤/—Å—Ç–æ—Ä–∏—Å\n"
            "‚Ä¢ –ü–æ–¥–±–æ—Ä –ø–∞–ª–∏—Ç—Ä—ã –∏ —à—Ä–∏—Ñ—Ç–æ–≤\n"
            "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞"
        ),
    ),
    "VK_DESIGN": Product(
        id="VK_DESIGN",
        title="üî• –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã VK–æ–Ω—Ç–∞–∫—Ç–µ",
        price=500,
        description=(
            "–ü—Ä–æ–∫–∞—á–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
            "‚Ä¢ –î–∏–∑–∞–π–Ω —à–∞–ø–∫–∏ –∏ –º–µ–Ω—é\n"
            "‚Ä¢ –û–±–ª–æ–∂–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤/–æ–±—Å—É–∂–¥–µ–Ω–∏–π\n"
            "‚Ä¢ –®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤\n"
            "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –¶–ê"
        ),
    ),
    "FULL_MANAGEMENT": Product(
        id="FULL_MANAGEMENT",
        title="üöÄ –ü–æ–ª–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
        price=6500,
        description=(
            "–ö–æ–º–ø–ª–µ–∫—Å –¥–ª—è —Ä–æ—Å—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n\n"
            "‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–≤–µ—Ç—ã\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"
        ),
    ),
    "TG_AUDIT": Product(
        id="TG_AUDIT",
        title="üìä –ê—É–¥–∏—Ç –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ Telegram",
        price=350,
        description=(
            "–í—ã—è–≤–∏–º —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞\n\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–∏–∑—É–∞–ª–∞\n"
            "‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ü–ª–∞–Ω –∏–∑ 10 —à–∞–≥–æ–≤"
        ),
    ),
    "WEEKLY_PLAN": Product(
        id="WEEKLY_PLAN",
        title="üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é",
        price=400,
        description=(
            "–ì–æ—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ 7 –¥–Ω–µ–π\n\n"
            "‚Ä¢ 7 –∏–¥–µ–π –ø–æ—Å—Ç–æ–≤\n"
            "‚Ä¢ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç—ã –ø–æ–¥ –≤–∞—à—É –¶–ê\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –≤–∏–∑—É–∞–ª—É –∏ —Å—Ç–æ—Ä–∏—Å"
        ),
    ),
}

# –ö–æ—Ä–∑–∏–Ω—ã –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: user_id -> {product_id: qty}
CART: Dict[int, Dict[str, int]] = {}
CART_LOCK = Lock()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
ASK_CONTACT, ASK_NOTE, ASK_TXN = range(3)
ASK_QUESTION = range(1)  # –¥–ª—è ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DIV = "‚îÄ" * 42

def menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["–ö–∞—Ç–∞–ª–æ–≥", "–ö–æ—Ä–∑–∏–Ω–∞"],
            ["üìû –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"],
        ],
        resize_keyboard=True,
    )

def catalog_ikb() -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for p in PRODUCTS.values():
        rows.append([InlineKeyboardButton(f"{p.title} ‚Äî {p.price}‚ÇΩ", callback_data=f"view:{p.id}")])
    return InlineKeyboardMarkup(rows)

def product_ikb(pid: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add:{pid}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back:catalog")],
        ]
    )

def cart_ikb(has_items: bool) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    if has_items:
        rows.append([InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        rows.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back:catalog")])
    return InlineKeyboardMarkup(rows)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£—Ç–∏–ª–∏—Ç—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_cart(user_id: int) -> Dict[str, int]:
    with CART_LOCK:
        return CART.setdefault(user_id, {})

def cart_summary(user_id: int) -> Tuple[str, int]:
    items = get_cart(user_id)
    if not items:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", 0
    lines = [f"<b>üß∫ –ö–æ—Ä–∑–∏–Ω–∞</b>\n{DIV}"]
    total = 0
    for pid, qty in items.items():
        p = PRODUCTS.get(pid)
        if not p:
            continue
        s = p.price * qty
        total += s
        lines.append(f"‚Ä¢ {p.title} √ó {qty} = <b>{s}‚ÇΩ</b>")
    lines.append(f"{DIV}\n<b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>")
    return "\n".join(lines), total

def append_order(order: dict) -> None:
    data = []
    if ORDERS_FILE.exists():
        try:
            data = json.loads(ORDERS_FILE.read_text("utf-8"))
        except Exception:
            data = []
    data.append(order)
    ORDERS_FILE.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

def user_mention(u) -> str:
    if getattr(u, "username", None):
        return f"@{u.username}"
    name = f"{u.first_name or ''} {u.last_name or ''}".strip()
    return name or f"id:{u.id}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    greeting = (
        "üíé <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø ‚Äî —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ SMM –∏ –¥–∏–∑–∞–π–Ω—É.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ç–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ "
        "–≤ Telegram, VK –∏ –¥—Ä—É–≥–∏–µ –ø–ª–æ—â–∞–¥–∫–∏!\n\n"
        f"{DIV}\n"
        "<b>–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:</b>\n"
        "üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É\n"
        "üìû –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º\n"
        "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ, –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤\n\n"
        "–ì–æ—Ç–æ–≤ —É—Å–∏–ª–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç? –ù–∞–∂–º–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª! üëá"
    )
    await update.message.reply_text(greeting, parse_mode=ParseMode.HTML, reply_markup=menu_kb())

# ‚Äî –ö–∞—Ç–∞–ª–æ–≥
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    header = f"<b>–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b>\n{DIV}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∏–∂–µ:"
    if update.message:
        await update.message.reply_text(header, parse_mode=ParseMode.HTML, reply_markup=menu_kb())
        await update.message.reply_text("‚ñº", reply_markup=catalog_ikb())
    else:
        q = update.callback_query
        await q.message.edit_text(header, parse_mode=ParseMode.HTML, reply_markup=catalog_ikb())
        await q.answer()

async def view_product_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    pid = q.data.split(":", 1)[1]
    p = PRODUCTS.get(pid)
    if not p:
        await q.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    text = f"<b>{p.title}</b>\n{DIV}\n{p.description}\n\n–¶–µ–Ω–∞: <b>{p.price}‚ÇΩ</b>"
    await q.message.edit_text(text, reply_markup=product_ikb(p.id), parse_mode=ParseMode.HTML)
    await q.answer()

async def add_to_cart_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    pid = q.data.split(":", 1)[1]
    if pid not in PRODUCTS:
        await q.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    items = get_cart(q.from_user.id)
    items[pid] = items.get(pid, 0) + 1
    await q.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")
    text, _ = cart_summary(q.from_user.id)
    await q.message.edit_text(text, reply_markup=cart_ikb(True), parse_mode=ParseMode.HTML)

async def back_catalog_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await show_catalog(update, context)

# ‚Äî –ö–æ—Ä–∑–∏–Ω–∞
async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.message.from_user.id
    text, _ = cart_summary(uid)
    await update.message.reply_text(text, reply_markup=cart_ikb(bool(get_cart(uid))), parse_mode=ParseMode.HTML)

async def clear_cart_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    with CART_LOCK:
        CART[q.from_user.id] = {}
    await q.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    text, _ = cart_summary(q.from_user.id)
    await q.message.edit_text(text, reply_markup=cart_ikb(False), parse_mode=ParseMode.HTML)

# ‚Äî –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∞–≤—Ç–æ-username
async def checkout_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    items = get_cart(q.from_user.id)
    if not items:
        await q.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return ConversationHandler.END

    user = q.from_user
    username = f"@{user.username}" if user.username else None
    if username:
        context.user_data["contact"] = username
        await q.message.edit_text(
            f"<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n{DIV}\n–í–∞—à username: {username}\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é).",
            parse_mode=ParseMode.HTML
        )
        return ASK_NOTE
    else:
        await q.message.edit_text(
            f"<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n{DIV}\n–£ –≤–∞—Å –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ @username.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è (—Ç–µ–ª–µ–≥—Ä–∞–º-–Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω).",
            parse_mode=ParseMode.HTML
        )
        return ASK_CONTACT

async def ask_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if "contact" not in context.user_data:
        context.user_data["contact"] = update.message.text.strip()
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é).")
        return ASK_NOTE

    context.user_data["note"] = update.message.text.strip()
    text = (
        f"<b>–û–ø–ª–∞—Ç–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏</b>\n{DIV}\n\n"
        f"–ö–∞—Ä—Ç–∞: <code>{CARD_DETAILS}</code>\n\n"
        f"{PAY_INSTRUCTIONS}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ <b>–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏/—á–µ–∫–∞</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")]], resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return ASK_TXN

async def ask_txn(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["note"] = update.message.text.strip()
    text = (
        f"<b>–û–ø–ª–∞—Ç–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏</b>\n{DIV}\n\n"
        f"–ö–∞—Ä—Ç–∞: <code>{CARD_DETAILS}</code>\n\n"
        f"{PAY_INSTRUCTIONS}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ <b>–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏/—á–µ–∫–∞</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await update.message.reply_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")]], resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return ASK_TXN

async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    uid = user.id
    txn = update.message.text.strip()

    items = get_cart(uid)
    _, total = cart_summary(uid)

    order = {
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "user_id": uid,
        "user": {"username": user.username, "first_name": user.first_name, "last_name": user.last_name},
        "items": [
            {"id": pid, "title": PRODUCTS[pid].title, "qty": qty, "price": PRODUCTS[pid].price}
            for pid, qty in items.items()
        ],
        "total": total,
        "contact": context.user_data.get("contact"),
        "note": context.user_data.get("note"),
        "transaction": txn,
    }

    append_order(order)

    if ADMIN_ID:
        cart_lines = "\n".join(
            f"‚Ä¢ {PRODUCTS[pid].title} √ó {qty} = {PRODUCTS[pid].price * qty}‚ÇΩ" for pid, qty in items.items()
        )
        admin_text = (
            f"üßæ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n{DIV}\n"
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_mention(user)} (id {uid})\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {order['contact']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['note']}\n\n"
            f"{cart_lines}\n\n"
            f"<b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>\n"
            f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è/—á–µ–∫: <code>{txn}</code>"
        )
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode=ParseMode.HTML)
        except Exception:
            pass

    with CART_LOCK:
        CART[uid] = {}

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=menu_kb(),
    )
    return ConversationHandler.END

async def cancel_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb())
    return ConversationHandler.END

# ‚Äî ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª —Å –º–æ—Å—Ç–æ–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
USER_QUESTIONS: Dict[int, int] = {}  # user_id -> last_admin_message_id

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–µ—Ä–µ–¥–∞–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞.",
        reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"]], resize_keyboard=True, one_time_keyboard=True),
    )
    return ASK_QUESTION

async def forward_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    text = update.message.text.strip()
    admin_text = (
        f"üì© <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>\n{DIV}\n"
        f"–û—Ç: {user_mention(user)} (id {user.id})\n\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n{text}\n\n"
        f"‚úèÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ:\n"
        f"/reply {user.id} –≤–∞—à_—Ç–µ–∫—Å—Ç"
    )
    msg = None
    if ADMIN_ID:
        try:
            msg = await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode=ParseMode.HTML)
        except Exception:
            pass

    if msg:
        USER_QUESTIONS[user.id] = msg.message_id

    await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞.", reply_markup=menu_kb())
    return ConversationHandler.END

async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id != ADMIN_ID:
        return  # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply user_id —Ç–µ–∫—Å—Ç")
        return
    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π user_id.")
        return
    reply_text = " ".join(context.args[1:]).strip()
    if not reply_text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
        return
    try:
        await context.bot.send_message(chat_id=user_id, text=f"üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}")
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")

async def cancel_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb())
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_application():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ë–∞–∑–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex(r"^–ö–∞—Ç–∞–ª–æ–≥$"), show_catalog))
    app.add_handler(MessageHandler(filters.Regex(r"^–ö–æ—Ä–∑–∏–Ω–∞$"), show_cart))
    app.add_handler(CallbackQueryHandler(view_product_cb, pattern=r"^view:"))
    app.add_handler(CallbackQueryHandler(add_to_cart_cb, pattern=r"^add:"))
    app.add_handler(CallbackQueryHandler(back_catalog_cb, pattern=r"^back:catalog$"))
    app.add_handler(CallbackQueryHandler(clear_cart_cb, pattern=r"^clear$"))

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    checkout_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(checkout_cb, pattern=r"^checkout$")],
        states={
            ASK_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_note)],
            ASK_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_txn)],
            ASK_TXN: [
                MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$"), cancel_checkout),
                MessageHandler(filters.TEXT & ~filters.COMMAND, finish_order),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$"), cancel_checkout)],
        allow_reentry=True,
    )
    app.add_handler(checkout_conv)

    # –î–∏–∞–ª–æ–≥ ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª
    ask_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^üìû –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å$"), ask_question)],
        states={
            ASK_QUESTION: [
                MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$"), cancel_question),
                MessageHandler(filters.TEXT & ~filters.COMMAND, forward_question),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ$"), cancel_question)],
        allow_reentry=True,
    )
    app.add_handler(ask_conv)

    # –ö–Ω–æ–ø–∫–∞ ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º¬ª
    app.add_handler(
        MessageHandler(
            filters.Regex(r"^üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º$"),
            lambda u, c: u.message.reply_text("üì¨ –ù–∞–ø–∏—à–∏ –Ω–∞–ø—Ä—è–º—É—é: @Delay34", reply_markup=menu_kb()),
        )
    )

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
    app.add_handler(CommandHandler("reply", reply_command))

    return app


if __name__ == "__main__":
    application = build_application()
    print("Bot is running...")
    application.run_polling()
